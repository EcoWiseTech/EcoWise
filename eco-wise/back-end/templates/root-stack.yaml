Description: Root Stack, contains all the resources needed for the application
AWSTemplateFormatVersion: '2010-09-09'

Resources:
  # DynamoDB table stacks
  WeatherTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: WeatherTable
      AttributeDefinitions:
        - AttributeName: Location
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: Location
          KeyType: HASH
        - AttributeName: Timestamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Environment
          Value: Production
        - Key: Application
          Value: EcoWise

  # Base API gateway stack
  EcoWiseApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ecowiseapi
      Description: "API Gateway for the EcoWise project"
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API endpoints for GET method integration
  GetWeatherDataResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt EcoWiseApi.RootResourceId
      PathPart: get-weather-data
      RestApiId: !Ref EcoWiseApi

  GetWeatherDataMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref EcoWiseApi
      ResourceId: !Ref GetWeatherDataResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:lambda:us-east-1:992382578667:function:get-weather-data-function
        PassthroughBehavior: WHEN_NO_MATCH

  ApiGatewayLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: get-weather-data-function
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${EcoWiseApi}/GET/get-weather-data"

  # Lambda function stacks
  nestedSkeletonStack:
    Type: AWS::CloudFormation::Stack 
    Properties:
      TemplateURL: https://s3.amazonaws.com/eco-wise-iac-artifact-bucket/templates/github-to-lambda.yaml
      Parameters:
        FunctionName: "github-to-lambda"
        TemplateBucket: "eco-wise-iac-artifact-bucket"
  nestedFunctionStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/eco-wise-iac-artifact-bucket/templates/github-to-lambda-02.yaml
      Parameters:
        FunctionName: "github-to-lambda-02"
        TemplateBucket: "eco-wise-iac-artifact-bucket"

  nestedFunctionThreeStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/eco-wise-iac-artifact-bucket/templates/github-to-lambda-03.yaml
      Parameters:
        FunctionName: "github-to-lambda-03"
        TemplateBucket: "eco-wise-iac-artifact-bucket" 
  nestedFunctionFourStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/eco-wise-iac-artifact-bucket/templates/github-to-lambda-04.yaml
      Parameters:
        FunctionName: "github-to-lambda-04"
        TemplateBucket: "eco-wise-iac-artifact-bucket" 
  WeatherApiFunctionStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/eco-wise-iac-artifact-bucket/templates/weather-api-function.yaml
      Parameters:
        FunctionName: "weather-api-function"
        TemplateBucket: "eco-wise-iac-artifact-bucket" 
  GetWeatherDataFunctionStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/eco-wise-iac-artifact-bucket/templates/get-weather-data-function.yaml
      Parameters:
        FunctionName: "get-weather-data-function"
        TemplateBucket: "eco-wise-iac-artifact-bucket"
