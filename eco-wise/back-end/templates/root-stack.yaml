Description: Root Stack, contains all the resources needed for the application
AWSTemplateFormatVersion: '2010-09-09'

Resources:
  # DynamoDB table stacks
  WeatherTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: WeatherTable
      AttributeDefinitions:
        - AttributeName: Location
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: Location
          KeyType: HASH
        - AttributeName: Timestamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Environment
          Value: Production
        - Key: Application
          Value: EcoWise
          
  # Weather Table creation
  TemperatureTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TemperatureTable
      AttributeDefinitions:
        - AttributeName: Location
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: Location
          KeyType: HASH
        - AttributeName: Timestamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Environment
          Value: Production
        - Key: Application
          Value: EcoWise

  # Base API gateway stack
  EcoWiseApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ecowiseapi
      Description: "API Gateway for the EcoWise project"
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API endpoints for GET method integration
  GetWeatherDataResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt EcoWiseApi.RootResourceId
      PathPart: get-weather-data
      RestApiId: !Ref EcoWiseApi

  GetWeatherDataMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref EcoWiseApi
      ResourceId: !Ref GetWeatherDataResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:get-weather-data-function/invocations
        PassthroughBehavior: WHEN_NO_MATCH

  GetWeatherDataApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:get-weather-data-function
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com


  # KURT
  EcowiseApiSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "ecowiseApiTrafficAlert1"

  EcowiseApiTrafficAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "ecowiseapiTrafficAlarm1"
      AlarmDescription: "This alarm monitors the number of requests sent to ecowiseapi. If it exceeds 10 requests in 30 seconds, an email is sent to kurrbarr@gmail.com ."
      MetricName: "Count"
      Namespace: "AWS/ApiGateway"
      Statistic: "Sum"
      Period: 21600
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: "GreaterThanThreshold"
      Dimensions:
        - Name: "ApiName"
          Value: "ecowiseapi"
      AlarmActions:
        - Ref: "EcowiseApiSnsTopic"
      DatapointsToAlarm: 1
      TreatMissingData: "missing"
      ActionsEnabled: true

  EcowiseApiSnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: "email"
      Endpoint: "kurrbarr@gmail.com"
      TopicArn: 
        Ref: "EcowiseApiSnsTopic"
