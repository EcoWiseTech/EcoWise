AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM template for mass resources ( Lambda + api gateway + custom events)

Globals:
  # Global settings configuration
  Function:
    Timeout: 60
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS,PUT'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"
    # AllowCredentials: true  Uncomment only if you choose a specific origin instead of the * wildcard.

Resources:
  # Lambda + api gateway resource + event triggers (eventbridge, customMessage)
  StoreWeatherApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: StoreWeatherApiFunction/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: WeatherTable
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(30 minutes)
            Description: "Trigger the Lambda function every 30 minutes"

  StoreTemperatureApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: StoreTemperatureApiFunction/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: TemperatureTable
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
            Description: "Trigger the Lambda function every 5 minutes"

  GetWeatherApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetWeatherApiFunction/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: WeatherTable
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Events:
        GetWeatherApiResource:
          Type: Api
          Properties:
            Path: /GetWeatherApi
            Method: get
            RestApiId: !Ref ServerlessRestApi

  GetTemperatureApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetTemperatureApiFunction/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: TemperatureTable
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Events:
        GetTemperatureApiResource:
          Type: Api
          Properties:
            Path: /GetTemperatureApi
            Method: get
            RestApiId: !Ref ServerlessRestApi

  FormatPasswordResetEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: FormatPasswordResetEmailFunction/
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64

  AdminGetUserApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: AdminGetUserApiFunction/
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Events:
        AdminGetUserApiResource:
          Type: Api
          Properties:
            Path: /admin/getuser
            Method: post
            RestApiId: !Ref ServerlessRestApi

  AdminGetUserByIDPSubApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: AdminGetUserByIDPSubApiFunction/
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Events:
        AdminGetUserByIDPSubApiResource:
          Type: Api
          Properties:
            Path: /admin/getuserbyidpsub
            Method: post
            RestApiId: !Ref ServerlessRestApi

  SSOCheckEmailApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SSOCheckEmailApiFunction/
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Events:
        SSOCheckEmailApiResource:
          Type: Api
          Properties:
            Path: /SSO/checkEmail
            Method: post
            RestApiId: !Ref ServerlessRestApi

  StoreHomeApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: StoreHomeApiFunction/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: HomeTable
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Events:
        StoreHomeApiResource:
          Type: Api
          Properties:
            Path: /Home/StoreHome
            Method: Post
            RestApiId: !Ref ServerlessRestApi

  GetHomeApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetHomeApiFunction/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: HomeTable
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Events:
        GetHomeApiResource:
          Type: Api
          Properties:
            Path: /Home/GetHome
            Method: get
            RestApiId: !Ref ServerlessRestApi

  UpdateHomeApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UpdateHomeApiFunction/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: HomeTable
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Events:
        UpdateHomeApiResource:
          Type: Api
          Properties:
            Path: /Home/UpdateHome
            Method: put
            RestApiId: !Ref ServerlessRestApi

  DeleteHomeApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: DeleteHomeApiFunction/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: HomeTable
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Events:
        DeleteHomeApiResource:
          Type: Api
          Properties:
            Path: /Home/DeleteHome
            Method: post
            RestApiId: !Ref ServerlessRestApi

  StoreDeviceConsumptionApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: StoreDeviceConsumptionApiFunction/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: DeviceConsumptionTable
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Events:
        StoreDeviceConsumptionApiResource:
          Type: Api
          Properties:
            Path: /DeviceConsumption/StoreDeviceConsumption
            Method: post
            RestApiId: !Ref ServerlessRestApi

  GetDeviceConsumptionApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetDeviceConsumptionApiFunction/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: DeviceConsumptionTable
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Events:
        GetDeviceConsumptionApiResource:
          Type: Api
          Properties:
            Path: /DeviceConsumption/GetDeviceConsumption
            Method: get
            RestApiId: !Ref ServerlessRestApi
  GetGSIDeviceConsumptionApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetGSIDeviceConsumptionApiFunction/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: DeviceConsumptionTable
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Events:
        GetGSIDeviceConsumptionApiResource:
          Type: Api
          Properties:
            Path: /DeviceConsumption/GetGSIDeviceConsumption
            Method: get
            RestApiId: !Ref ServerlessRestApi

  UpdateDeviceConsumptionApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UpdateDeviceConsumptionApiFunction/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: DeviceConsumptionTable
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          TopicArn: !ImportValue TriggerCheckBudgetCostOverrunTopicOutput #So that can retrieve Arn from env , and not hardcode it
      Events:
        UpdateDeviceConsumptionApiResource:
          Type: Api
          Properties:
            Path: /DeviceConsumption/UpdateDeviceConsumption
            Method: put
            RestApiId: !Ref ServerlessRestApi

Outputs:
  EcoWiseApi:
    Description: "API Gateway endpoint URL for Prod stage for EcoWiseApi function"
    Value: !Sub ServerlessRestApi
  StoreWeatherApiFunction:
    Description: "StoreWeatherApiFunction ARN"
    Value: !GetAtt StoreWeatherApiFunction.Arn
  StoreWeatherApiFunctionIamRole:
    Description: "Implicit IAM Role created for StoreWeatherApiFunction"
    Value: !GetAtt StoreWeatherApiFunctionRole.Arn

  StoreTemperatureApiFunction:
    Description: "StoreTemperatureApiFunction ARN"
    Value: !GetAtt StoreTemperatureApiFunction.Arn
  StoreTemperatureApiFunctionIamRole:
    Description: "Implicit IAM Role created for StoreTemperatureApiFunction"
    Value: !GetAtt StoreTemperatureApiFunction.Arn

  GetWeatherApiResource:
    Description: "API Gateway endpoint URL for Prod stage for GetWeatherApiFunction "
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/GetWeatherApi/"
  GetWeatherApiFunction:
    Description: "GetWeatherApiFunction ARN"
    Value: !GetAtt GetWeatherApiFunction.Arn
  GetWeatherApiFunctionIamRole:
    Description: "Implicit IAM Role created for GetWeatherApiFunction"
    Value: !GetAtt GetWeatherApiFunctionRole.Arn

  GetTemperatureApiResource:
    Description: "API Gateway endpoint URL for Prod stage for GetTemperatureApiFunction "
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/GetTemperatureApi/"
  GetTemperatureApiFunction:
    Description: "GetTemperatureApiFunction ARN"
    Value: !GetAtt GetTemperatureApiFunction.Arn
  GetTemperatureApiFunctionIamRole:
    Description: "Implicit IAM Role created for GetTemperatureApiFunction"
    Value: !GetAtt GetTemperatureApiFunctionRole.Arn

  FormatPasswordResetEmailFunction:
    Description: "FormatPasswordResetEmailFunction ARN"
    Value: !GetAtt FormatPasswordResetEmailFunction.Arn
  FormatPasswordResetEmailFunctionIamRole:
    Description: "Implicit IAM Role created for FormatPasswordResetEmailFunction"
    Value: !GetAtt FormatPasswordResetEmailFunctionRole.Arn

  AdminGetUserApiResource:
    Description: "API Gateway endpoint URL for AdminGetUserApiFunction"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/admin/getuser/"
  AdminGetUserApiFunction:
    Description: "AdminGetUserApiFunction ARN"
    Value: !GetAtt AdminGetUserApiFunction.Arn
  AdminGetUserApiFunctionIamRole:
    Description: "Implicit IAM Role created for AdminGetUserApiFunction"
    Value: !GetAtt AdminGetUserApiFunctionRole.Arn

  AdminGetUserByIDPSubApiResource:
    Description: "API Gateway endpoint URL for AdminGetUserByIDPSubApiFunction"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/admin/getuserbyidpsub/"
  AdminGetUserByIDPSubApiFunction:
    Description: "AdminGetUserByIDPSubApiFunction ARN"
    Value: !GetAtt AdminGetUserByIDPSubApiFunction.Arn
  AdminGetUserByIDPSubrApiFunctionIamRole:
    Description: "Implicit IAM Role created for AdminGetUserByIDPSubApiFunction"
    Value: !GetAtt AdminGetUserByIDPSubApiFunction.Arn

  SSOCheckEmailApiResource:
    Description: "API Gateway endpoint URL for SSOCheckEmailApiFunction"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/SSO/checkEmail/"
  SSOCheckEmailApiFunction:
    Description: "SSOCheckEmailApiFunction ARN"
    Value: !GetAtt SSOCheckEmailApiFunction.Arn
  SSOCheckEmailApiFunctionIamRole:
    Description: "Implicit IAM Role created for SSOCheckEmailApiFunction"
    Value: !GetAtt SSOCheckEmailApiFunctionRole.Arn
